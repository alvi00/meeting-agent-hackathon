import os
import requests
from google.cloud import translate_v2 as translate
from dotenv import load_dotenv

load_dotenv()

# Sample Bangla input
bangla_text = """
‡¶π‡ßç‡¶Ø‡¶æ‡¶≤‡ßã ‡¶è‡¶≠‡¶∞‡¶ø ‡¶ì‡¶Ø‡¶º‡¶æ‡¶®‡•§ ‡¶§‡ßã‡¶Æ‡¶æ‡¶¶‡ßá‡¶∞ ‡¶∏‡¶¨‡¶æ‡¶á‡¶ï‡ßá ‡¶Ü‡¶Æ‡¶ø ‡¶¨‡¶≤‡¶§‡ßá ‡¶ö‡¶æ‡¶á, ‡¶Ø‡ßá ‡¶§‡ßã‡¶Æ‡¶∞‡¶æ ‡¶§‡ßã‡¶Æ‡¶æ‡¶¶‡ßá‡¶∞ ‡¶ï‡ßÅ‡¶á‡¶ú‡ßá ‡¶Ö‡¶®‡ßá‡¶ï ‡¶≠‡¶æ‡¶≤‡ßã ‡¶∞‡ßá‡¶ú‡¶æ‡¶≤‡ßç‡¶ü ‡¶ï‡¶∞‡¶õ‡ßã, 
‡¶§‡ßã‡¶Æ‡¶∞‡¶æ ‡¶∏‡¶¨‡¶æ‡¶á ‡¶¨‡¶ø‡¶∂‡ßç‡¶¨‡ßá‡¶∞ ‡¶¨‡ßá‡¶∂‡¶ø ‡¶™‡¶æ‡¶á‡¶õ‡ßã, ‡¶∏‡ßá‡¶ü‡¶æ ‡¶Ö‡¶®‡ßá‡¶ï ‡¶≠‡¶æ‡¶≤‡ßã‡•§ ‡¶Ü‡¶Æ‡¶ø ‡¶Ü‡¶ú‡¶ï‡ßá‡¶∞ ‡¶Æ‡¶ø‡¶ü‡¶ø‡¶Ç‡¶Ø‡¶º‡ßá ‡¶¨‡¶≤‡¶§‡ßá ‡¶ö‡¶æ‡¶á, ‡¶§‡ßã‡¶Æ‡¶æ‡¶¶‡ßá‡¶∞ ‡¶∏‡¶¨‡¶æ‡¶á‡¶ï‡ßá 
‡¶Ü‡¶Æ‡¶ø ‡¶Ö‡¶®‡ßá‡¶ï ‡¶≠‡¶æ‡¶≤‡ßã ‡¶∞‡ßá‡¶ú‡¶æ‡¶≤‡ßç‡¶ü ‡¶ï‡¶∞‡¶æ‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø ‡¶∂‡ßÅ‡¶≠‡ßá‡¶ö‡ßç‡¶õ‡¶æ ‡¶ú‡¶æ‡¶®‡¶æ‡¶¨‡ßã‡•§ ‡¶Ü‡¶∞ ‡¶§‡ßã‡¶Æ‡¶∞‡¶æ ‡¶Ö‡ßç‡¶Ø‡¶æ‡¶ü‡ßá‡¶®‡¶°‡ßá‡¶®‡ßç‡¶∏‡ßá‡¶∞ ‡¶™‡¶∞‡ßá ‡¶ö‡¶≤‡ßá ‡¶Ø‡ßá‡¶ì, ‡¶†‡¶ø‡¶ï ‡¶Ü‡¶õ‡ßá, 
‡¶ß‡¶®‡ßç‡¶Ø‡¶¨‡¶æ‡¶¶ ‡¶∏‡¶¨‡¶æ‡¶á‡¶ï‡ßá‡•§
"""

# Step 1: Translate Bangla ‚Üí English
def translate_bangla_to_english(text):
    client = translate.Client()
    result = client.translate(
        text,
        source_language="bn",
        target_language="en",
        format_="text"
    )
    return result["translatedText"]

# Step 2: Summarize in English using Groq
def summarize_english_text(text):
    prompt = f"""
You are an AI meeting assistant. Please read the following meeting transcript and produce a concise, action-oriented summary. Your summary should include:

1. Main topics discussed  
2. Key decisions made  
3. Action items (who is responsible for what)  
4. Deadlines or next steps  

Transcript:
{text}
""".strip()

    response = requests.post(
        "https://api.groq.com/openai/v1/chat/completions",
        headers={
            "Authorization": f"Bearer {os.getenv('GROQ_API_KEY')}",
            "Content-Type": "application/json",
        },
        json={
            "model": "llama3-8b-8192",
            "messages": [{"role": "user", "content": prompt}],
            "temperature": 0.5,
            "max_tokens": 256,
        },
        timeout=30,
    )
    response.raise_for_status()
    return response.json()["choices"][0]["message"]["content"].strip()

# Step 3: Translate English summary ‚Üí Bangla
def translate_english_to_bangla(text):
    client = translate.Client()
    result = client.translate(
        text,
        source_language="en",
        target_language="bn",
        format_="text"
    )
    return result["translatedText"]

# üîÅ Run full flow
if __name__ == "__main__":
    print("üîÑ Translating Bangla to English...")
    english_text = translate_bangla_to_english(bangla_text)
    print("\nüìú Translated Text:\n", english_text)

    print("\nüß† Summarizing...")
    summary_en = summarize_english_text(english_text)
    print("\n‚úÖ Summary in English:\n", summary_en)

    print("\nüåê Translating Summary Back to Bangla...")
    summary_bn = translate_english_to_bangla(summary_en)
    print("\nüéØ Final Summary in Bangla:\n", summary_bn)
